{"version":3,"sources":["LoadingButton.js","App.js","index.js"],"names":["LoadingButton","props","onClick","loading","btnText","color","Button","variant","disabled","CircularProgress","size","useStyles","makeStyles","theme","root","flexGrow","paper","minHeight","display","flexWrap","App","classes","useState","currentInput","setCurrentInput","currentJson","setCurrentJson","darkMode","setDarkMode","isLoading","setIsLoading","darkTheme","createMuiTheme","palette","type","primary","main","orange","lightBlue","secondary","deepOrange","deepPurple","className","ThemeProvider","CssBaseline","Container","maxWidth","Grid","container","spacing","justify","alignItems","direction","item","md","style","fontSize","lg","TextField","id","label","multiline","rows","fullWidth","onChange","e","target","value","ButtonGroup","orientation","aria-label","length","attemptedParse","errMsg","JSON","parse","err","name","message","toast","error","warn","src","overflow","maxHeight","position","autoClose","hideProgressBar","newestOnTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9d86287.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CircularProgress, Button } from \"@material-ui/core\";\r\n\r\nexport default function LoadingButton(props) {\r\n  const { onClick, loading, btnText, color } = props;\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      onClick={onClick}\r\n      disabled={loading}\r\n      color={color}\r\n    >\r\n      {loading && <CircularProgress size={14} />}\r\n      {!loading && btnText}\r\n    </Button>\r\n  );\r\n}\r\n","// 3rd party\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport {\r\n  CssBaseline,\r\n  Grid,\r\n  Container,\r\n  TextField,\r\n  Button,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  orange,\r\n  lightBlue,\r\n  deepPurple,\r\n  deepOrange,\r\n} from \"@material-ui/core/colors\";\r\nimport ReactJson from \"react-json-view\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport EmojiFoodBeverageOutlinedIcon from \"@material-ui/icons/EmojiFoodBeverageOutlined\";\r\n\r\n// custom components\r\nimport \"./App.css\";\r\nimport LoadingButton from \"./LoadingButton\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    minHeight: \"100%\",\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  const [currentInput, setCurrentInput] = useState(\"\");\r\n  const [currentJson, setCurrentJson] = useState();\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const darkTheme = createMuiTheme({\r\n    palette: {\r\n      type: darkMode ? \"dark\" : \"light\",\r\n      primary: {\r\n        main: darkMode ? orange[500] : lightBlue[500],\r\n      },\r\n      secondary: {\r\n        main: darkMode ? deepOrange[900] : deepPurple[500],\r\n      },\r\n    },\r\n  });\r\n  const handleClick = (e) => {\r\n    if (currentInput && currentInput.length > 0) {\r\n      setIsLoading(true);\r\n      let attemptedParse = \"\";\r\n      let errMsg = \"\";\r\n      try {\r\n        attemptedParse = JSON.parse(currentInput);\r\n      } catch (err) {\r\n        errMsg = `Failed due to ${err.name}\\nError: ${err.message}`;\r\n      }\r\n\r\n      if (errMsg.length > 0) {\r\n        toast.error(errMsg);\r\n      } else {\r\n        setCurrentJson(attemptedParse);\r\n      }\r\n    } else {\r\n      toast.warn(\"Please enter ugly JSON first...\");\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  const generateJsonTree = () => {\r\n    if (currentJson == null) {\r\n      return <div className=\"json-tree-container\"></div>;\r\n    } else {\r\n      return (\r\n        <div className=\"json-tree-container\">\r\n          <ReactJson\r\n            src={currentJson}\r\n            theme={darkMode ? \"monokai\" : \"rjv-default\"}\r\n            style={{ overflow: \"auto\", maxHeight: \"955px\" }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <main>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <CssBaseline />\r\n          <Container maxWidth=\"xl\">\r\n            <Grid\r\n              container\r\n              spacing={0}\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              direction=\"column\"\r\n            >\r\n              <Grid item md={12}>\r\n                <EmojiFoodBeverageOutlinedIcon style={{ fontSize: 80 }} />\r\n              </Grid>\r\n              <Grid item md={12}>\r\n                <h2>Json Beautifier</h2>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n              <Grid item md={5} lg={5}>\r\n                <TextField\r\n                  id=\"current-input\"\r\n                  label=\"Ugly JSON goes here...\"\r\n                  multiline\r\n                  rows={50}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setCurrentInput(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item md={2} lg={2}>\r\n                <Grid\r\n                  container\r\n                  spacing={1}\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <ButtonGroup\r\n                    orientation=\"vertical\"\r\n                    aria-label=\"vertical outlined primary button group\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    {/* <Button color=\"primary\" onClick={handleClick}>\r\n                      Beautify\r\n                    </Button> */}\r\n                    <LoadingButton\r\n                      onClick={handleClick}\r\n                      loading={isLoading}\r\n                      btnText={\"Beautifytific\"}\r\n                      color={\"primary\"}\r\n                    />\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      onClick={() => setDarkMode(!darkMode)}\r\n                    >\r\n                      Dark Mode\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item md={5} lg={5}>\r\n                {generateJsonTree()}\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </ThemeProvider>\r\n        <ToastContainer\r\n          position=\"bottom-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={true}\r\n          newestOnTop={true}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}